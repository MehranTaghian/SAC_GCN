TODOs are as follows:

1) The fill_value argument was removed in torch-scatter>=2.0.0 as it introduced a lot of problems for scatter_max.
In scatter_max, we usually want to fill missing values with zero, while we also want to allow negative output values
as a result of grouping only negative values (rather than set this to 0 by default).

If you want to restore the old behavior, you can define out before-hand and set it to your desired fill_value:
out = src.new_zeros(output_shape)
scatter_max(src, index, dim=..., out=out)

2) based on the relevance score of the joint, find how much time it takes to adapt for each fault occured
 to those joints with positive scores, and how detrimental the fault would be.

3) Why are you using your left hand to write? Because my right hand is damaged -> my dynamics changed. In life-long learning,
we can analyze the change in the policy and change in the pattern of relevance scores.

9) Try to train the joint velocity-based actions for better relevance calculations. Already the experiment is running
on melco to train using the velocity-based actions.

10) Running experiments for FetchReachEnv-v3

15) Handle all the graph environements with wrappers

17) For ant, check the loss function of the critic. it is close to zero (maybe not!). why?

18) HalfCheetah running on mehran with 200 time-steps max

19) change the main.py file and instead of using np.append for collecting data, use a constant numpy.zero before running
the experiments. This way, you would have a constant amount of memory throughout the experiments. for both main files

20) TODO ASAP:
 -i) rerun the experiments for halfcheetah original model for 10 seeds
 i) The original model was wayyy better according to the experiments on fetchreach
 ii) compare the new model with the original model on halfcheetah
 iii) add walker and hopper to the analysis

21) Add load parameters in evaluation processes

22) The relation between actions (torques applied to specific joints) and joints can be nicely seen in Walker2d heatmap.

23) If you render the simulation in Walker2d, you can see that from a specific time-step onward, it is mostly using
its left leg. That can explain the reason of higher relevance scores in the left leg on the heatmap.

24) remove redundant data from custom gym envs and add wrappers instead

25) plot the time of storing and updating through time
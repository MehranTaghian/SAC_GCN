TODOs are as follows:

1) The fill_value argument was removed in torch-scatter>=2.0.0 as it introduced a lot of problems for scatter_max.
In scatter_max, we usually want to fill missing values with zero, while we also want to allow negative output values
as a result of grouping only negative values (rather than set this to 0 by default).

If you want to restore the old behavior, you can define out before-hand and set it to your desired fill_value:
out = src.new_zeros(output_shape)
scatter_max(src, index, dim=..., out=out)

2) based on the relevance score of the joint, find how much time it takes to adapt for each fault occured
 to those joints with positive scores, and how detrimental the fault would be.

3) Why are you using your left hand to write? Because my right hand is damaged -> my dynamics changed. In life-long learning,
we can analyze the change in the policy and change in the pattern of relevance scores.

23) If you render the simulation in Walker2d, you can see that from a specific time-step onward, it is mostly using
its left leg. That can explain the reason of higher relevance scores in the left leg on the heatmap.


35) increase the size of title and axis in learning curves
36) evaluate based on the last time step
37) add global features to the evaluation

38) Analyze LRP scores during the training process and the change in the scores.
39) Analyze the transferability of the policy to the new dynamics

40) Change the heatmap of significancy test to compare the two learning curves based on the selected window for their
performance